import type { MediaItem } from "@/models/media";
import { apiFetch } from "./client";

import { loadAbort } from "@/utils/loadAbort";

import { type TMDBItem } from "@/models/TMDBItem";
import { mapTMDBToMediaItem } from "@/utils/mappers/mapTMDBToMediaItem";

export async function fetchTrendingMedia(): Promise<MediaItem[]> {
  const data = await apiFetch<{ results: TMDBItem[] }>("3/trending/all/day");

  return data.results.map(mapTMDBToMediaItem);
}

export async function fetchRecommendedMedia(page = 1) {
  const [moviesData, tvData] = await Promise.all([
    apiFetch<{ results: TMDBItem[]; total_pages: number }>(
      `3/movie/popular?page=${page}`
    ),
    apiFetch<{ results: TMDBItem[]; total_pages: number }>(
      `3/tv/popular?page=${page}`
    ),
  ]);

  const combined = [...moviesData.results, ...tvData.results]
    .map(mapTMDBToMediaItem)
    .sort((a, b) => a.title.localeCompare(b.title));

  console.log("fetchRecommendedMedia", {
    moviesData: moviesData.results,
    tvData: tvData.results,
    items: combined,
    hasMore: page < Math.min(moviesData.total_pages, tvData.total_pages),
  });

  return {
    items: combined,
    hasMore: page < Math.min(moviesData.total_pages, tvData.total_pages),
  };
}
